// Code generated by go-swagger; DO NOT EDIT.

package fleet_workstation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fleet workstation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fleet workstation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationID deletes fleet workstation
*/
func (a *Client) DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationID(params *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDParams) (*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationID",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDNoContent), nil

}

/*
DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofile unlinks fleet workstation from fleet hardware profile
*/
func (a *Client) DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofile(params *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofileParams) (*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofile",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/fleethardwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofileNoContent), nil

}

/*
DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofile unlinks fleet workstation from fleet software profile
*/
func (a *Client) DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofile(params *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofileParams) (*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofile",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/fleetsoftwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofileNoContent), nil

}

/*
DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxml deletes fleet workstation j p o s entries XML
*/
func (a *Client) DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxml(params *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxmlParams) (*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxmlNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxmlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxml",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/jposentriesxml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxmlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxmlNoContent), nil

}

/*
DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystemproperties deletes fleet workstation system properties
*/
func (a *Client) DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystemproperties(params *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystempropertiesParams) (*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystempropertiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystempropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystemproperties",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystempropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystempropertiesNoContent), nil

}

/*
GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstation lists fleet workstations
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstation(params *GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationParams) (*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstation",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationOK), nil

}

/*
GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationID gets fleet workstation details
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationID(params *GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDParams) (*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationID",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDOK), nil

}

/*
GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDConfig gets fleet workstation config
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDConfig(params *GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDConfigParams) (*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDConfig",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDConfigOK), nil

}

/*
GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxml uploads fleet workstation j p o s entries XML
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxml(params *GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxmlParams) (*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxmlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxmlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxml",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/jposentriesxml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxmlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDJposentriesxmlOK), nil

}

/*
GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystemproperties uploads fleet workstation system properties
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystemproperties(params *GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystempropertiesParams) (*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystempropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystempropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystemproperties",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystempropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDSystempropertiesOK), nil

}

/*
PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstation creates fleet workstation
*/
func (a *Client) PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstation(params *PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationParams) (*PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstation",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationCreated), nil

}

/*
PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofile links fleet workstation with fleet hardware profile
*/
func (a *Client) PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofile(params *PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofileParams) (*PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofile",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/fleethardwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleethardwareprofileNoContent), nil

}

/*
PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofile links fleet workstation with fleet software profile
*/
func (a *Client) PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofile(params *PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofileParams) (*PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofile",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/fleetsoftwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDFleetsoftwareprofileNoContent), nil

}

/*
PutFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationID updates fleet workstation
*/
func (a *Client) PutFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationID(params *PutFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDParams) (*PutFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationID",
		Method:             "PUT",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutFleetTenantTenantIDBrandBrandIDCountryCountryIDStoreStoreIDWorkstationWorkstationIDNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
