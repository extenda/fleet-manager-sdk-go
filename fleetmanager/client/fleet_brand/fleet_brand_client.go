// Code generated by go-swagger; DO NOT EDIT.

package fleet_brand

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fleet brand API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fleet brand API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteFleetTenantTenantIDBrandBrandID deletes fleet brand
*/
func (a *Client) DeleteFleetTenantTenantIDBrandBrandID(params *DeleteFleetTenantTenantIDBrandBrandIDParams) (*DeleteFleetTenantTenantIDBrandBrandIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDBrandBrandIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDBrandBrandID",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDBrandBrandIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDBrandBrandIDNoContent), nil

}

/*
DeleteFleetTenantTenantIDBrandBrandIDSystemproperties deletes fleet brand system properties
*/
func (a *Client) DeleteFleetTenantTenantIDBrandBrandIDSystemproperties(params *DeleteFleetTenantTenantIDBrandBrandIDSystempropertiesParams) (*DeleteFleetTenantTenantIDBrandBrandIDSystempropertiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDBrandBrandIDSystempropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDBrandBrandIDSystemproperties",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDBrandBrandIDSystempropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDBrandBrandIDSystempropertiesNoContent), nil

}

/*
GetFleetTenantTenantIDBrand lists fleet brands
*/
func (a *Client) GetFleetTenantTenantIDBrand(params *GetFleetTenantTenantIDBrandParams) (*GetFleetTenantTenantIDBrandOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrand",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandOK), nil

}

/*
GetFleetTenantTenantIDBrandBrandID gets fleet brand details
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandID(params *GetFleetTenantTenantIDBrandBrandIDParams) (*GetFleetTenantTenantIDBrandBrandIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandID",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDOK), nil

}

/*
GetFleetTenantTenantIDBrandBrandIDSystemproperties uploads fleet brand system properties
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandIDSystemproperties(params *GetFleetTenantTenantIDBrandBrandIDSystempropertiesParams) (*GetFleetTenantTenantIDBrandBrandIDSystempropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDSystempropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandIDSystemproperties",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDSystempropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDSystempropertiesOK), nil

}

/*
PostFleetTenantTenantIDBrand creates fleet brand
*/
func (a *Client) PostFleetTenantTenantIDBrand(params *PostFleetTenantTenantIDBrandParams) (*PostFleetTenantTenantIDBrandCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFleetTenantTenantIDBrandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFleetTenantTenantIDBrand",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFleetTenantTenantIDBrandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFleetTenantTenantIDBrandCreated), nil

}

/*
PutFleetTenantTenantIDBrandBrandID updates fleet brand
*/
func (a *Client) PutFleetTenantTenantIDBrandBrandID(params *PutFleetTenantTenantIDBrandBrandIDParams) (*PutFleetTenantTenantIDBrandBrandIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFleetTenantTenantIDBrandBrandIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFleetTenantTenantIDBrandBrandID",
		Method:             "PUT",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFleetTenantTenantIDBrandBrandIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutFleetTenantTenantIDBrandBrandIDNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
