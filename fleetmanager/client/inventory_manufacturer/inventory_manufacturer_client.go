// Code generated by go-swagger; DO NOT EDIT.

package inventory_manufacturer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new inventory manufacturer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for inventory manufacturer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteInventoryManufacturerManufacturerID deletes inventory manufacturer
*/
func (a *Client) DeleteInventoryManufacturerManufacturerID(params *DeleteInventoryManufacturerManufacturerIDParams) (*DeleteInventoryManufacturerManufacturerIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInventoryManufacturerManufacturerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteInventoryManufacturerManufacturerID",
		Method:             "DELETE",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInventoryManufacturerManufacturerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInventoryManufacturerManufacturerIDNoContent), nil

}

/*
GetInventoryManufacturer lists inventory manufacturers
*/
func (a *Client) GetInventoryManufacturer(params *GetInventoryManufacturerParams) (*GetInventoryManufacturerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryManufacturerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInventoryManufacturer",
		Method:             "GET",
		PathPattern:        "/inventory/manufacturer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryManufacturerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInventoryManufacturerOK), nil

}

/*
GetInventoryManufacturerManufacturerID gets inventory manufacturer details
*/
func (a *Client) GetInventoryManufacturerManufacturerID(params *GetInventoryManufacturerManufacturerIDParams) (*GetInventoryManufacturerManufacturerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryManufacturerManufacturerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInventoryManufacturerManufacturerID",
		Method:             "GET",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryManufacturerManufacturerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInventoryManufacturerManufacturerIDOK), nil

}

/*
PostInventoryManufacturer creates inventory manufacturer
*/
func (a *Client) PostInventoryManufacturer(params *PostInventoryManufacturerParams) (*PostInventoryManufacturerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInventoryManufacturerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostInventoryManufacturer",
		Method:             "POST",
		PathPattern:        "/inventory/manufacturer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInventoryManufacturerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostInventoryManufacturerCreated), nil

}

/*
PutInventoryManufacturerManufacturerID updates inventory manufacturer
*/
func (a *Client) PutInventoryManufacturerManufacturerID(params *PutInventoryManufacturerManufacturerIDParams) (*PutInventoryManufacturerManufacturerIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutInventoryManufacturerManufacturerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutInventoryManufacturerManufacturerID",
		Method:             "PUT",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutInventoryManufacturerManufacturerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutInventoryManufacturerManufacturerIDNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
