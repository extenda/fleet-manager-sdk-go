// Code generated by go-swagger; DO NOT EDIT.

package fleet_country

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fleet country API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fleet country API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteFleetTenantTenantIDBrandBrandIDCountryCountryID deletes fleet country
*/
func (a *Client) DeleteFleetTenantTenantIDBrandBrandIDCountryCountryID(params *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDParams) (*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDBrandBrandIDCountryCountryID",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDNoContent), nil

}

/*
DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemproperties deletes fleet country system properties
*/
func (a *Client) DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemproperties(params *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystempropertiesParams) (*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystempropertiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystempropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemproperties",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystempropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystempropertiesNoContent), nil

}

/*
GetFleetTenantTenantIDBrandBrandIDCountry lists fleet countries
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandIDCountry(params *GetFleetTenantTenantIDBrandBrandIDCountryParams) (*GetFleetTenantTenantIDBrandBrandIDCountryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDCountryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandIDCountry",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDCountryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDCountryOK), nil

}

/*
GetFleetTenantTenantIDBrandBrandIDCountryCountryID gets fleet country details
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandIDCountryCountryID(params *GetFleetTenantTenantIDBrandBrandIDCountryCountryIDParams) (*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDCountryCountryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandIDCountryCountryID",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDCountryCountryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDOK), nil

}

/*
GetFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemproperties uploads fleet country system properties
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemproperties(params *GetFleetTenantTenantIDBrandBrandIDCountryCountryIDSystempropertiesParams) (*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDSystempropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDCountryCountryIDSystempropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemproperties",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDCountryCountryIDSystempropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDCountryCountryIDSystempropertiesOK), nil

}

/*
PostFleetTenantTenantIDBrandBrandIDCountry creates fleet country
*/
func (a *Client) PostFleetTenantTenantIDBrandBrandIDCountry(params *PostFleetTenantTenantIDBrandBrandIDCountryParams) (*PostFleetTenantTenantIDBrandBrandIDCountryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFleetTenantTenantIDBrandBrandIDCountryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFleetTenantTenantIDBrandBrandIDCountry",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFleetTenantTenantIDBrandBrandIDCountryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFleetTenantTenantIDBrandBrandIDCountryCreated), nil

}

/*
PutFleetTenantTenantIDBrandBrandIDCountryCountryID updates fleet country
*/
func (a *Client) PutFleetTenantTenantIDBrandBrandIDCountryCountryID(params *PutFleetTenantTenantIDBrandBrandIDCountryCountryIDParams) (*PutFleetTenantTenantIDBrandBrandIDCountryCountryIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFleetTenantTenantIDBrandBrandIDCountryCountryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFleetTenantTenantIDBrandBrandIDCountryCountryID",
		Method:             "PUT",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFleetTenantTenantIDBrandBrandIDCountryCountryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutFleetTenantTenantIDBrandBrandIDCountryCountryIDNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
