// Code generated by go-swagger; DO NOT EDIT.

package fleet_country

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/extenda/fleet-manager-sdk-go/fleetmanager/models"
)

// DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLReader is a Reader for the DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURL structure.
type DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLNoContent creates a DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLNoContent with default headers values
func NewDeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLNoContent() *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLNoContent {
	return &DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLNoContent{}
}

/*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLNoContent handles this case with default header values.

No Content
*/
type DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLNoContent struct {
}

func (o *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLNoContent) Error() string {
	return fmt.Sprintf("[DELETE /fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/systemPropertiesUrl][%d] deleteFleetTenantTenantIdBrandBrandIdCountryCountryIdSystemPropertiesUrlNoContent ", 204)
}

func (o *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLBadRequest creates a DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLBadRequest with default headers values
func NewDeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLBadRequest() *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLBadRequest {
	return &DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLBadRequest{}
}

/*DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLBadRequest handles this case with default header values.

Bad Request
*/
type DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLBadRequest struct {
	Payload *models.Error
}

func (o *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/systemPropertiesUrl][%d] deleteFleetTenantTenantIdBrandBrandIdCountryCountryIdSystemPropertiesUrlBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteFleetTenantTenantIDBrandBrandIDCountryCountryIDSystemPropertiesURLBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
