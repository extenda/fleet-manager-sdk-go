// Code generated by go-swagger; DO NOT EDIT.

package fleet_tenant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fleet tenant API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fleet tenant API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateTenant creates fleet tenant
*/
func (a *Client) CreateTenant(params *CreateTenantParams) (*CreateTenantCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTenant",
		Method:             "POST",
		PathPattern:        "/fleet/tenant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTenantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateTenantCreated), nil

}

/*
DeleteTenant deletes fleet tenant
*/
func (a *Client) DeleteTenant(params *DeleteTenantParams) (*DeleteTenantNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTenant",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTenantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTenantNoContent), nil

}

/*
DeleteTenantSystemProperties deletes fleet tenant system properties
*/
func (a *Client) DeleteTenantSystemProperties(params *DeleteTenantSystemPropertiesParams) (*DeleteTenantSystemPropertiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTenantSystemPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTenantSystemProperties",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTenantSystemPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTenantSystemPropertiesNoContent), nil

}

/*
GetTenantByID gets fleet tenant details
*/
func (a *Client) GetTenantByID(params *GetTenantByIDParams) (*GetTenantByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantById",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTenantByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTenantByIDOK), nil

}

/*
ListTenants lists fleet tenants
*/
func (a *Client) ListTenants(params *ListTenantsParams) (*ListTenantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTenantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTenants",
		Method:             "GET",
		PathPattern:        "/fleet/tenant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTenantsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListTenantsOK), nil

}

/*
UpdateTenant updates fleet tenant
*/
func (a *Client) UpdateTenant(params *UpdateTenantParams) (*UpdateTenantNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTenant",
		Method:             "PUT",
		PathPattern:        "/fleet/tenant/{tenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateTenantNoContent), nil

}

/*
UploadTenantSystemProperties uploads fleet tenant system properties
*/
func (a *Client) UploadTenantSystemProperties(params *UploadTenantSystemPropertiesParams) (*UploadTenantSystemPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadTenantSystemPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadTenantSystemProperties",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadTenantSystemPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadTenantSystemPropertiesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
