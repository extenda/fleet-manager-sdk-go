// Code generated by go-swagger; DO NOT EDIT.

package fleet_tenant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fleet tenant API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fleet tenant API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteFleetTenantTenantID deletes fleet tenant
*/
func (a *Client) DeleteFleetTenantTenantID(params *DeleteFleetTenantTenantIDParams) (*DeleteFleetTenantTenantIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantID",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDNoContent), nil

}

/*
DeleteFleetTenantTenantIDSystemPropertiesURL deletes fleet tenant system properties
*/
func (a *Client) DeleteFleetTenantTenantIDSystemPropertiesURL(params *DeleteFleetTenantTenantIDSystemPropertiesURLParams) (*DeleteFleetTenantTenantIDSystemPropertiesURLNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDSystemPropertiesURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDSystemPropertiesURL",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/systemPropertiesUrl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDSystemPropertiesURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDSystemPropertiesURLNoContent), nil

}

/*
GetFleetTenant lists fleet tenants
*/
func (a *Client) GetFleetTenant(params *GetFleetTenantParams) (*GetFleetTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenant",
		Method:             "GET",
		PathPattern:        "/fleet/tenant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantOK), nil

}

/*
GetFleetTenantTenantID gets fleet tenant details
*/
func (a *Client) GetFleetTenantTenantID(params *GetFleetTenantTenantIDParams) (*GetFleetTenantTenantIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantID",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDOK), nil

}

/*
GetFleetTenantTenantIDSystemPropertiesURL uploads fleet tenant system properties
*/
func (a *Client) GetFleetTenantTenantIDSystemPropertiesURL(params *GetFleetTenantTenantIDSystemPropertiesURLParams) (*GetFleetTenantTenantIDSystemPropertiesURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDSystemPropertiesURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDSystemPropertiesURL",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/systemPropertiesUrl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDSystemPropertiesURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDSystemPropertiesURLOK), nil

}

/*
PostFleetTenant creates fleet tenant
*/
func (a *Client) PostFleetTenant(params *PostFleetTenantParams) (*PostFleetTenantCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFleetTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFleetTenant",
		Method:             "POST",
		PathPattern:        "/fleet/tenant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFleetTenantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFleetTenantCreated), nil

}

/*
PutFleetTenantTenantID updates fleet tenant
*/
func (a *Client) PutFleetTenantTenantID(params *PutFleetTenantTenantIDParams) (*PutFleetTenantTenantIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFleetTenantTenantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFleetTenantTenantID",
		Method:             "PUT",
		PathPattern:        "/fleet/tenant/{tenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFleetTenantTenantIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutFleetTenantTenantIDNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
