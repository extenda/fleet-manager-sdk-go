// Code generated by go-swagger; DO NOT EDIT.

package fleet_hardware_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fleet hardware profile API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fleet hardware profile API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileID deletes fleet hardware profile
*/
func (a *Client) DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileID(params *DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDParams) (*DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileID",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDNoContent), nil

}

/*
DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodel unlinks fleet hardware profile from inventory model
*/
func (a *Client) DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodel(params *DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodelParams) (*DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodel",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}/inventorymodel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodelNoContent), nil

}

/*
DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxml deletes fleet hardware profile j p o s entries XML
*/
func (a *Client) DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxml(params *DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxmlParams) (*DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxmlNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxmlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxml",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}/jposentriesxml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxmlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxmlNoContent), nil

}

/*
DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathsproperties deletes fleet hardware profile j p o s paths properties
*/
func (a *Client) DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathsproperties(params *DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathspropertiesParams) (*DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathspropertiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathspropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathsproperties",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}/jpospathsproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathspropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathspropertiesNoContent), nil

}

/*
GetFleetTenantTenantIDBrandBrandIDHardwareprofile lists fleet hardware profiles
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandIDHardwareprofile(params *GetFleetTenantTenantIDBrandBrandIDHardwareprofileParams) (*GetFleetTenantTenantIDBrandBrandIDHardwareprofileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDHardwareprofileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandIDHardwareprofile",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDHardwareprofileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDHardwareprofileOK), nil

}

/*
GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileID gets fleet hardware profile details
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileID(params *GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDParams) (*GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileID",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDOK), nil

}

/*
GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxml uploads fleet hardware profile j p o s entries XML
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxml(params *GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxmlParams) (*GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxmlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxmlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxml",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}/jposentriesxml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxmlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJposentriesxmlOK), nil

}

/*
GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathsproperties uploads fleet hardware profile j p o s paths properties
*/
func (a *Client) GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathsproperties(params *GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathspropertiesParams) (*GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathspropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathspropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathsproperties",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}/jpospathsproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathspropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDJpospathspropertiesOK), nil

}

/*
PostFleetTenantTenantIDBrandBrandIDHardwareprofile creates fleet hardware profile
*/
func (a *Client) PostFleetTenantTenantIDBrandBrandIDHardwareprofile(params *PostFleetTenantTenantIDBrandBrandIDHardwareprofileParams) (*PostFleetTenantTenantIDBrandBrandIDHardwareprofileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFleetTenantTenantIDBrandBrandIDHardwareprofileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFleetTenantTenantIDBrandBrandIDHardwareprofile",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFleetTenantTenantIDBrandBrandIDHardwareprofileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFleetTenantTenantIDBrandBrandIDHardwareprofileCreated), nil

}

/*
PostFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodel links fleet hardware profile with inventory model
*/
func (a *Client) PostFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodel(params *PostFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodelParams) (*PostFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodel",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}/inventorymodel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDInventorymodelNoContent), nil

}

/*
PutFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileID updates fleet hardware profile
*/
func (a *Client) PutFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileID(params *PutFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDParams) (*PutFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileID",
		Method:             "PUT",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutFleetTenantTenantIDBrandBrandIDHardwareprofileHardwareProfileIDNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
