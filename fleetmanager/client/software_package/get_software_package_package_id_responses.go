// Code generated by go-swagger; DO NOT EDIT.

package software_package

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/extenda/fleet-manager-sdk-go/fleetmanager/models"
)

// GetSoftwarePackagePackageIDReader is a Reader for the GetSoftwarePackagePackageID structure.
type GetSoftwarePackagePackageIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSoftwarePackagePackageIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSoftwarePackagePackageIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSoftwarePackagePackageIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSoftwarePackagePackageIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSoftwarePackagePackageIDOK creates a GetSoftwarePackagePackageIDOK with default headers values
func NewGetSoftwarePackagePackageIDOK() *GetSoftwarePackagePackageIDOK {
	return &GetSoftwarePackagePackageIDOK{}
}

/*GetSoftwarePackagePackageIDOK handles this case with default header values.

OK
*/
type GetSoftwarePackagePackageIDOK struct {
	Payload *models.SoftwarePackage
}

func (o *GetSoftwarePackagePackageIDOK) Error() string {
	return fmt.Sprintf("[GET /software/package/{packageId}][%d] getSoftwarePackagePackageIdOK  %+v", 200, o.Payload)
}

func (o *GetSoftwarePackagePackageIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SoftwarePackage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSoftwarePackagePackageIDBadRequest creates a GetSoftwarePackagePackageIDBadRequest with default headers values
func NewGetSoftwarePackagePackageIDBadRequest() *GetSoftwarePackagePackageIDBadRequest {
	return &GetSoftwarePackagePackageIDBadRequest{}
}

/*GetSoftwarePackagePackageIDBadRequest handles this case with default header values.

Bad Request
*/
type GetSoftwarePackagePackageIDBadRequest struct {
	Payload *models.Error
}

func (o *GetSoftwarePackagePackageIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /software/package/{packageId}][%d] getSoftwarePackagePackageIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetSoftwarePackagePackageIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSoftwarePackagePackageIDNotFound creates a GetSoftwarePackagePackageIDNotFound with default headers values
func NewGetSoftwarePackagePackageIDNotFound() *GetSoftwarePackagePackageIDNotFound {
	return &GetSoftwarePackagePackageIDNotFound{}
}

/*GetSoftwarePackagePackageIDNotFound handles this case with default header values.

Not Found
*/
type GetSoftwarePackagePackageIDNotFound struct {
}

func (o *GetSoftwarePackagePackageIDNotFound) Error() string {
	return fmt.Sprintf("[GET /software/package/{packageId}][%d] getSoftwarePackagePackageIdNotFound ", 404)
}

func (o *GetSoftwarePackagePackageIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
