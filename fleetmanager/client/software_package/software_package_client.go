// Code generated by go-swagger; DO NOT EDIT.

package software_package

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new software package API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for software package API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteSoftwarePackagePackageID deletes software package
*/
func (a *Client) DeleteSoftwarePackagePackageID(params *DeleteSoftwarePackagePackageIDParams) (*DeleteSoftwarePackagePackageIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftwarePackagePackageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSoftwarePackagePackageID",
		Method:             "DELETE",
		PathPattern:        "/software/package/{packageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSoftwarePackagePackageIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSoftwarePackagePackageIDNoContent), nil

}

/*
GetSoftwarePackage lists software packages
*/
func (a *Client) GetSoftwarePackage(params *GetSoftwarePackageParams) (*GetSoftwarePackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwarePackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSoftwarePackage",
		Method:             "GET",
		PathPattern:        "/software/package",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSoftwarePackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSoftwarePackageOK), nil

}

/*
GetSoftwarePackagePackageID gets software package details
*/
func (a *Client) GetSoftwarePackagePackageID(params *GetSoftwarePackagePackageIDParams) (*GetSoftwarePackagePackageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwarePackagePackageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSoftwarePackagePackageID",
		Method:             "GET",
		PathPattern:        "/software/package/{packageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSoftwarePackagePackageIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSoftwarePackagePackageIDOK), nil

}

/*
PostSoftwarePackage creates software package
*/
func (a *Client) PostSoftwarePackage(params *PostSoftwarePackageParams) (*PostSoftwarePackageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSoftwarePackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSoftwarePackage",
		Method:             "POST",
		PathPattern:        "/software/package",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSoftwarePackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSoftwarePackageCreated), nil

}

/*
PutSoftwarePackagePackageID updates software package
*/
func (a *Client) PutSoftwarePackagePackageID(params *PutSoftwarePackagePackageIDParams) (*PutSoftwarePackagePackageIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSoftwarePackagePackageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSoftwarePackagePackageID",
		Method:             "PUT",
		PathPattern:        "/software/package/{packageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSoftwarePackagePackageIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSoftwarePackagePackageIDNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
