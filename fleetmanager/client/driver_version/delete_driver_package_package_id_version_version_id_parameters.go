// Code generated by go-swagger; DO NOT EDIT.

package driver_version

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteDriverPackagePackageIDVersionVersionIDParams creates a new DeleteDriverPackagePackageIDVersionVersionIDParams object
// with the default values initialized.
func NewDeleteDriverPackagePackageIDVersionVersionIDParams() *DeleteDriverPackagePackageIDVersionVersionIDParams {
	var ()
	return &DeleteDriverPackagePackageIDVersionVersionIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteDriverPackagePackageIDVersionVersionIDParamsWithTimeout creates a new DeleteDriverPackagePackageIDVersionVersionIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteDriverPackagePackageIDVersionVersionIDParamsWithTimeout(timeout time.Duration) *DeleteDriverPackagePackageIDVersionVersionIDParams {
	var ()
	return &DeleteDriverPackagePackageIDVersionVersionIDParams{

		timeout: timeout,
	}
}

// NewDeleteDriverPackagePackageIDVersionVersionIDParamsWithContext creates a new DeleteDriverPackagePackageIDVersionVersionIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteDriverPackagePackageIDVersionVersionIDParamsWithContext(ctx context.Context) *DeleteDriverPackagePackageIDVersionVersionIDParams {
	var ()
	return &DeleteDriverPackagePackageIDVersionVersionIDParams{

		Context: ctx,
	}
}

// NewDeleteDriverPackagePackageIDVersionVersionIDParamsWithHTTPClient creates a new DeleteDriverPackagePackageIDVersionVersionIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteDriverPackagePackageIDVersionVersionIDParamsWithHTTPClient(client *http.Client) *DeleteDriverPackagePackageIDVersionVersionIDParams {
	var ()
	return &DeleteDriverPackagePackageIDVersionVersionIDParams{
		HTTPClient: client,
	}
}

/*DeleteDriverPackagePackageIDVersionVersionIDParams contains all the parameters to send to the API endpoint
for the delete driver package package ID version version ID operation typically these are written to a http.Request
*/
type DeleteDriverPackagePackageIDVersionVersionIDParams struct {

	/*PackageID*/
	PackageID string
	/*VersionID*/
	VersionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete driver package package ID version version ID params
func (o *DeleteDriverPackagePackageIDVersionVersionIDParams) WithTimeout(timeout time.Duration) *DeleteDriverPackagePackageIDVersionVersionIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete driver package package ID version version ID params
func (o *DeleteDriverPackagePackageIDVersionVersionIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete driver package package ID version version ID params
func (o *DeleteDriverPackagePackageIDVersionVersionIDParams) WithContext(ctx context.Context) *DeleteDriverPackagePackageIDVersionVersionIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete driver package package ID version version ID params
func (o *DeleteDriverPackagePackageIDVersionVersionIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete driver package package ID version version ID params
func (o *DeleteDriverPackagePackageIDVersionVersionIDParams) WithHTTPClient(client *http.Client) *DeleteDriverPackagePackageIDVersionVersionIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete driver package package ID version version ID params
func (o *DeleteDriverPackagePackageIDVersionVersionIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPackageID adds the packageID to the delete driver package package ID version version ID params
func (o *DeleteDriverPackagePackageIDVersionVersionIDParams) WithPackageID(packageID string) *DeleteDriverPackagePackageIDVersionVersionIDParams {
	o.SetPackageID(packageID)
	return o
}

// SetPackageID adds the packageId to the delete driver package package ID version version ID params
func (o *DeleteDriverPackagePackageIDVersionVersionIDParams) SetPackageID(packageID string) {
	o.PackageID = packageID
}

// WithVersionID adds the versionID to the delete driver package package ID version version ID params
func (o *DeleteDriverPackagePackageIDVersionVersionIDParams) WithVersionID(versionID string) *DeleteDriverPackagePackageIDVersionVersionIDParams {
	o.SetVersionID(versionID)
	return o
}

// SetVersionID adds the versionId to the delete driver package package ID version version ID params
func (o *DeleteDriverPackagePackageIDVersionVersionIDParams) SetVersionID(versionID string) {
	o.VersionID = versionID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteDriverPackagePackageIDVersionVersionIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param packageId
	if err := r.SetPathParam("packageId", o.PackageID); err != nil {
		return err
	}

	// path param versionId
	if err := r.SetPathParam("versionId", o.VersionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
