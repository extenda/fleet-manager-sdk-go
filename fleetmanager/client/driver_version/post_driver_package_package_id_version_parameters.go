// Code generated by go-swagger; DO NOT EDIT.

package driver_version

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "fleet-manager-sdk-go/fleetmanager/models"
)

// NewPostDriverPackagePackageIDVersionParams creates a new PostDriverPackagePackageIDVersionParams object
// with the default values initialized.
func NewPostDriverPackagePackageIDVersionParams() *PostDriverPackagePackageIDVersionParams {
	var ()
	return &PostDriverPackagePackageIDVersionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostDriverPackagePackageIDVersionParamsWithTimeout creates a new PostDriverPackagePackageIDVersionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostDriverPackagePackageIDVersionParamsWithTimeout(timeout time.Duration) *PostDriverPackagePackageIDVersionParams {
	var ()
	return &PostDriverPackagePackageIDVersionParams{

		timeout: timeout,
	}
}

// NewPostDriverPackagePackageIDVersionParamsWithContext creates a new PostDriverPackagePackageIDVersionParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostDriverPackagePackageIDVersionParamsWithContext(ctx context.Context) *PostDriverPackagePackageIDVersionParams {
	var ()
	return &PostDriverPackagePackageIDVersionParams{

		Context: ctx,
	}
}

// NewPostDriverPackagePackageIDVersionParamsWithHTTPClient creates a new PostDriverPackagePackageIDVersionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostDriverPackagePackageIDVersionParamsWithHTTPClient(client *http.Client) *PostDriverPackagePackageIDVersionParams {
	var ()
	return &PostDriverPackagePackageIDVersionParams{
		HTTPClient: client,
	}
}

/*PostDriverPackagePackageIDVersionParams contains all the parameters to send to the API endpoint
for the post driver package package ID version operation typically these are written to a http.Request
*/
type PostDriverPackagePackageIDVersionParams struct {

	/*Body*/
	Body *models.CreateDriverVersion
	/*PackageID*/
	PackageID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post driver package package ID version params
func (o *PostDriverPackagePackageIDVersionParams) WithTimeout(timeout time.Duration) *PostDriverPackagePackageIDVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post driver package package ID version params
func (o *PostDriverPackagePackageIDVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post driver package package ID version params
func (o *PostDriverPackagePackageIDVersionParams) WithContext(ctx context.Context) *PostDriverPackagePackageIDVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post driver package package ID version params
func (o *PostDriverPackagePackageIDVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post driver package package ID version params
func (o *PostDriverPackagePackageIDVersionParams) WithHTTPClient(client *http.Client) *PostDriverPackagePackageIDVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post driver package package ID version params
func (o *PostDriverPackagePackageIDVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post driver package package ID version params
func (o *PostDriverPackagePackageIDVersionParams) WithBody(body *models.CreateDriverVersion) *PostDriverPackagePackageIDVersionParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post driver package package ID version params
func (o *PostDriverPackagePackageIDVersionParams) SetBody(body *models.CreateDriverVersion) {
	o.Body = body
}

// WithPackageID adds the packageID to the post driver package package ID version params
func (o *PostDriverPackagePackageIDVersionParams) WithPackageID(packageID string) *PostDriverPackagePackageIDVersionParams {
	o.SetPackageID(packageID)
	return o
}

// SetPackageID adds the packageId to the post driver package package ID version params
func (o *PostDriverPackagePackageIDVersionParams) SetPackageID(packageID string) {
	o.PackageID = packageID
}

// WriteToRequest writes these params to a swagger request
func (o *PostDriverPackagePackageIDVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param packageId
	if err := r.SetPathParam("packageId", o.PackageID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
