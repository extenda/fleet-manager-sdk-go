// Code generated by go-swagger; DO NOT EDIT.

package driver_version

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new driver version API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for driver version API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteDriverPackagePackageIDVersionVersionID deletes driver version
*/
func (a *Client) DeleteDriverPackagePackageIDVersionVersionID(params *DeleteDriverPackagePackageIDVersionVersionIDParams) (*DeleteDriverPackagePackageIDVersionVersionIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDriverPackagePackageIDVersionVersionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDriverPackagePackageIDVersionVersionID",
		Method:             "DELETE",
		PathPattern:        "/driver/package/{packageId}/version/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDriverPackagePackageIDVersionVersionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDriverPackagePackageIDVersionVersionIDNoContent), nil

}

/*
DeleteDriverPackagePackageIDVersionVersionIDBinaryURL deletes driver binary
*/
func (a *Client) DeleteDriverPackagePackageIDVersionVersionIDBinaryURL(params *DeleteDriverPackagePackageIDVersionVersionIDBinaryURLParams) (*DeleteDriverPackagePackageIDVersionVersionIDBinaryURLNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDriverPackagePackageIDVersionVersionIDBinaryURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDriverPackagePackageIDVersionVersionIDBinaryURL",
		Method:             "DELETE",
		PathPattern:        "/driver/package/{packageId}/version/{versionId}/binaryUrl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDriverPackagePackageIDVersionVersionIDBinaryURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDriverPackagePackageIDVersionVersionIDBinaryURLNoContent), nil

}

/*
GetDriverPackagePackageIDVersion lists driver versions
*/
func (a *Client) GetDriverPackagePackageIDVersion(params *GetDriverPackagePackageIDVersionParams) (*GetDriverPackagePackageIDVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriverPackagePackageIDVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDriverPackagePackageIDVersion",
		Method:             "GET",
		PathPattern:        "/driver/package/{packageId}/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDriverPackagePackageIDVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriverPackagePackageIDVersionOK), nil

}

/*
GetDriverPackagePackageIDVersionVersionID gets driver version details
*/
func (a *Client) GetDriverPackagePackageIDVersionVersionID(params *GetDriverPackagePackageIDVersionVersionIDParams) (*GetDriverPackagePackageIDVersionVersionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriverPackagePackageIDVersionVersionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDriverPackagePackageIDVersionVersionID",
		Method:             "GET",
		PathPattern:        "/driver/package/{packageId}/version/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDriverPackagePackageIDVersionVersionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriverPackagePackageIDVersionVersionIDOK), nil

}

/*
GetDriverPackagePackageIDVersionVersionIDBinaryURL uploads driver binary
*/
func (a *Client) GetDriverPackagePackageIDVersionVersionIDBinaryURL(params *GetDriverPackagePackageIDVersionVersionIDBinaryURLParams) (*GetDriverPackagePackageIDVersionVersionIDBinaryURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriverPackagePackageIDVersionVersionIDBinaryURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDriverPackagePackageIDVersionVersionIDBinaryURL",
		Method:             "GET",
		PathPattern:        "/driver/package/{packageId}/version/{versionId}/binaryUrl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDriverPackagePackageIDVersionVersionIDBinaryURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriverPackagePackageIDVersionVersionIDBinaryURLOK), nil

}

/*
PostDriverPackagePackageIDVersion creates driver version
*/
func (a *Client) PostDriverPackagePackageIDVersion(params *PostDriverPackagePackageIDVersionParams) (*PostDriverPackagePackageIDVersionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDriverPackagePackageIDVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDriverPackagePackageIDVersion",
		Method:             "POST",
		PathPattern:        "/driver/package/{packageId}/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDriverPackagePackageIDVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDriverPackagePackageIDVersionCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
