// Code generated by go-swagger; DO NOT EDIT.

package driver_version

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "fleet-manager-sdk-go/fleetmanager/models"
)

// GetDriverPackagePackageIDVersionVersionIDReader is a Reader for the GetDriverPackagePackageIDVersionVersionID structure.
type GetDriverPackagePackageIDVersionVersionIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDriverPackagePackageIDVersionVersionIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDriverPackagePackageIDVersionVersionIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetDriverPackagePackageIDVersionVersionIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetDriverPackagePackageIDVersionVersionIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDriverPackagePackageIDVersionVersionIDOK creates a GetDriverPackagePackageIDVersionVersionIDOK with default headers values
func NewGetDriverPackagePackageIDVersionVersionIDOK() *GetDriverPackagePackageIDVersionVersionIDOK {
	return &GetDriverPackagePackageIDVersionVersionIDOK{}
}

/*GetDriverPackagePackageIDVersionVersionIDOK handles this case with default header values.

OK
*/
type GetDriverPackagePackageIDVersionVersionIDOK struct {
	Payload *models.DriverVersion
}

func (o *GetDriverPackagePackageIDVersionVersionIDOK) Error() string {
	return fmt.Sprintf("[GET /driver/package/{packageId}/version/{versionId}][%d] getDriverPackagePackageIdVersionVersionIdOK  %+v", 200, o.Payload)
}

func (o *GetDriverPackagePackageIDVersionVersionIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DriverVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDriverPackagePackageIDVersionVersionIDBadRequest creates a GetDriverPackagePackageIDVersionVersionIDBadRequest with default headers values
func NewGetDriverPackagePackageIDVersionVersionIDBadRequest() *GetDriverPackagePackageIDVersionVersionIDBadRequest {
	return &GetDriverPackagePackageIDVersionVersionIDBadRequest{}
}

/*GetDriverPackagePackageIDVersionVersionIDBadRequest handles this case with default header values.

Bad Request
*/
type GetDriverPackagePackageIDVersionVersionIDBadRequest struct {
	Payload *models.Error
}

func (o *GetDriverPackagePackageIDVersionVersionIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /driver/package/{packageId}/version/{versionId}][%d] getDriverPackagePackageIdVersionVersionIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetDriverPackagePackageIDVersionVersionIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDriverPackagePackageIDVersionVersionIDNotFound creates a GetDriverPackagePackageIDVersionVersionIDNotFound with default headers values
func NewGetDriverPackagePackageIDVersionVersionIDNotFound() *GetDriverPackagePackageIDVersionVersionIDNotFound {
	return &GetDriverPackagePackageIDVersionVersionIDNotFound{}
}

/*GetDriverPackagePackageIDVersionVersionIDNotFound handles this case with default header values.

Not Found
*/
type GetDriverPackagePackageIDVersionVersionIDNotFound struct {
}

func (o *GetDriverPackagePackageIDVersionVersionIDNotFound) Error() string {
	return fmt.Sprintf("[GET /driver/package/{packageId}/version/{versionId}][%d] getDriverPackagePackageIdVersionVersionIdNotFound ", 404)
}

func (o *GetDriverPackagePackageIDVersionVersionIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
