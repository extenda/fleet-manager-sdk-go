// Code generated by go-swagger; DO NOT EDIT.

package driver_version

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "fleet-manager-sdk-go/fleetmanager/models"
)

// GetDriverPackagePackageIDVersionVersionIDBinaryReader is a Reader for the GetDriverPackagePackageIDVersionVersionIDBinary structure.
type GetDriverPackagePackageIDVersionVersionIDBinaryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDriverPackagePackageIDVersionVersionIDBinaryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDriverPackagePackageIDVersionVersionIDBinaryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetDriverPackagePackageIDVersionVersionIDBinaryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetDriverPackagePackageIDVersionVersionIDBinaryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDriverPackagePackageIDVersionVersionIDBinaryOK creates a GetDriverPackagePackageIDVersionVersionIDBinaryOK with default headers values
func NewGetDriverPackagePackageIDVersionVersionIDBinaryOK() *GetDriverPackagePackageIDVersionVersionIDBinaryOK {
	return &GetDriverPackagePackageIDVersionVersionIDBinaryOK{}
}

/*GetDriverPackagePackageIDVersionVersionIDBinaryOK handles this case with default header values.

OK
*/
type GetDriverPackagePackageIDVersionVersionIDBinaryOK struct {
	Payload *models.S3PresignedPost
}

func (o *GetDriverPackagePackageIDVersionVersionIDBinaryOK) Error() string {
	return fmt.Sprintf("[GET /driver/package/{packageId}/version/{versionId}/binary][%d] getDriverPackagePackageIdVersionVersionIdBinaryOK  %+v", 200, o.Payload)
}

func (o *GetDriverPackagePackageIDVersionVersionIDBinaryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.S3PresignedPost)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDriverPackagePackageIDVersionVersionIDBinaryBadRequest creates a GetDriverPackagePackageIDVersionVersionIDBinaryBadRequest with default headers values
func NewGetDriverPackagePackageIDVersionVersionIDBinaryBadRequest() *GetDriverPackagePackageIDVersionVersionIDBinaryBadRequest {
	return &GetDriverPackagePackageIDVersionVersionIDBinaryBadRequest{}
}

/*GetDriverPackagePackageIDVersionVersionIDBinaryBadRequest handles this case with default header values.

Bad Request
*/
type GetDriverPackagePackageIDVersionVersionIDBinaryBadRequest struct {
	Payload *models.Error
}

func (o *GetDriverPackagePackageIDVersionVersionIDBinaryBadRequest) Error() string {
	return fmt.Sprintf("[GET /driver/package/{packageId}/version/{versionId}/binary][%d] getDriverPackagePackageIdVersionVersionIdBinaryBadRequest  %+v", 400, o.Payload)
}

func (o *GetDriverPackagePackageIDVersionVersionIDBinaryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDriverPackagePackageIDVersionVersionIDBinaryNotFound creates a GetDriverPackagePackageIDVersionVersionIDBinaryNotFound with default headers values
func NewGetDriverPackagePackageIDVersionVersionIDBinaryNotFound() *GetDriverPackagePackageIDVersionVersionIDBinaryNotFound {
	return &GetDriverPackagePackageIDVersionVersionIDBinaryNotFound{}
}

/*GetDriverPackagePackageIDVersionVersionIDBinaryNotFound handles this case with default header values.

Not Found
*/
type GetDriverPackagePackageIDVersionVersionIDBinaryNotFound struct {
}

func (o *GetDriverPackagePackageIDVersionVersionIDBinaryNotFound) Error() string {
	return fmt.Sprintf("[GET /driver/package/{packageId}/version/{versionId}/binary][%d] getDriverPackagePackageIdVersionVersionIdBinaryNotFound ", 404)
}

func (o *GetDriverPackagePackageIDVersionVersionIDBinaryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
