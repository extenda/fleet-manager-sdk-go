// Code generated by go-swagger; DO NOT EDIT.

package software_version

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "fleet-manager-sdk-go/fleetmanager/models"
)

// GetSoftwarePackagePackageIDVersionVersionIDReader is a Reader for the GetSoftwarePackagePackageIDVersionVersionID structure.
type GetSoftwarePackagePackageIDVersionVersionIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSoftwarePackagePackageIDVersionVersionIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSoftwarePackagePackageIDVersionVersionIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSoftwarePackagePackageIDVersionVersionIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSoftwarePackagePackageIDVersionVersionIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSoftwarePackagePackageIDVersionVersionIDOK creates a GetSoftwarePackagePackageIDVersionVersionIDOK with default headers values
func NewGetSoftwarePackagePackageIDVersionVersionIDOK() *GetSoftwarePackagePackageIDVersionVersionIDOK {
	return &GetSoftwarePackagePackageIDVersionVersionIDOK{}
}

/*GetSoftwarePackagePackageIDVersionVersionIDOK handles this case with default header values.

OK
*/
type GetSoftwarePackagePackageIDVersionVersionIDOK struct {
	Payload *models.SoftwareVersion
}

func (o *GetSoftwarePackagePackageIDVersionVersionIDOK) Error() string {
	return fmt.Sprintf("[GET /software/package/{packageId}/version/{versionId}][%d] getSoftwarePackagePackageIdVersionVersionIdOK  %+v", 200, o.Payload)
}

func (o *GetSoftwarePackagePackageIDVersionVersionIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SoftwareVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSoftwarePackagePackageIDVersionVersionIDBadRequest creates a GetSoftwarePackagePackageIDVersionVersionIDBadRequest with default headers values
func NewGetSoftwarePackagePackageIDVersionVersionIDBadRequest() *GetSoftwarePackagePackageIDVersionVersionIDBadRequest {
	return &GetSoftwarePackagePackageIDVersionVersionIDBadRequest{}
}

/*GetSoftwarePackagePackageIDVersionVersionIDBadRequest handles this case with default header values.

Bad Request
*/
type GetSoftwarePackagePackageIDVersionVersionIDBadRequest struct {
	Payload *models.Error
}

func (o *GetSoftwarePackagePackageIDVersionVersionIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /software/package/{packageId}/version/{versionId}][%d] getSoftwarePackagePackageIdVersionVersionIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetSoftwarePackagePackageIDVersionVersionIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSoftwarePackagePackageIDVersionVersionIDNotFound creates a GetSoftwarePackagePackageIDVersionVersionIDNotFound with default headers values
func NewGetSoftwarePackagePackageIDVersionVersionIDNotFound() *GetSoftwarePackagePackageIDVersionVersionIDNotFound {
	return &GetSoftwarePackagePackageIDVersionVersionIDNotFound{}
}

/*GetSoftwarePackagePackageIDVersionVersionIDNotFound handles this case with default header values.

Not Found
*/
type GetSoftwarePackagePackageIDVersionVersionIDNotFound struct {
}

func (o *GetSoftwarePackagePackageIDVersionVersionIDNotFound) Error() string {
	return fmt.Sprintf("[GET /software/package/{packageId}/version/{versionId}][%d] getSoftwarePackagePackageIdVersionVersionIdNotFound ", 404)
}

func (o *GetSoftwarePackagePackageIDVersionVersionIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
