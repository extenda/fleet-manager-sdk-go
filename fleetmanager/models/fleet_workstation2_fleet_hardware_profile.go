// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FleetWorkstation2FleetHardwareProfile fleet workstation2 fleet hardware profile
// swagger:model FleetWorkstation2FleetHardwareProfile
type FleetWorkstation2FleetHardwareProfile struct {

	// hardware profile
	// Required: true
	HardwareProfile *FleetWorkstation2FleetHardwareProfileHardwareProfile `json:"hardwareProfile"`
}

// Validate validates this fleet workstation2 fleet hardware profile
func (m *FleetWorkstation2FleetHardwareProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHardwareProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FleetWorkstation2FleetHardwareProfile) validateHardwareProfile(formats strfmt.Registry) error {

	if err := validate.Required("hardwareProfile", "body", m.HardwareProfile); err != nil {
		return err
	}

	if m.HardwareProfile != nil {
		if err := m.HardwareProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardwareProfile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FleetWorkstation2FleetHardwareProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FleetWorkstation2FleetHardwareProfile) UnmarshalBinary(b []byte) error {
	var res FleetWorkstation2FleetHardwareProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FleetWorkstation2FleetHardwareProfileHardwareProfile fleet workstation2 fleet hardware profile hardware profile
// swagger:model FleetWorkstation2FleetHardwareProfileHardwareProfile
type FleetWorkstation2FleetHardwareProfileHardwareProfile struct {

	// brand Id
	// Required: true
	BrandID *string `json:"brandId"`

	// hardware profile Id
	// Required: true
	HardwareProfileID *string `json:"hardwareProfileId"`

	// tenant Id
	// Required: true
	TenantID *string `json:"tenantId"`
}

// Validate validates this fleet workstation2 fleet hardware profile hardware profile
func (m *FleetWorkstation2FleetHardwareProfileHardwareProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrandID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardwareProfileID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FleetWorkstation2FleetHardwareProfileHardwareProfile) validateBrandID(formats strfmt.Registry) error {

	if err := validate.Required("hardwareProfile"+"."+"brandId", "body", m.BrandID); err != nil {
		return err
	}

	return nil
}

func (m *FleetWorkstation2FleetHardwareProfileHardwareProfile) validateHardwareProfileID(formats strfmt.Registry) error {

	if err := validate.Required("hardwareProfile"+"."+"hardwareProfileId", "body", m.HardwareProfileID); err != nil {
		return err
	}

	return nil
}

func (m *FleetWorkstation2FleetHardwareProfileHardwareProfile) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("hardwareProfile"+"."+"tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FleetWorkstation2FleetHardwareProfileHardwareProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FleetWorkstation2FleetHardwareProfileHardwareProfile) UnmarshalBinary(b []byte) error {
	var res FleetWorkstation2FleetHardwareProfileHardwareProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
